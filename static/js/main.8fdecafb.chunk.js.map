{"version":3,"sources":["components/Title.js","actions/index.js","components/List.js","components/TodoForm.js","reducers/index.js","TodoList.js","serviceWorker.js","index.js"],"names":["Title","todos","this","props","react_default","a","createElement","length","Component","connect","state","nextStartId","List","_this","map","todo","idx","key","id","onClick","removeTodo","text","dispatch","type","TodoForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createTodo","setState","e","target","value","keyCode","_this2","onChange","onInputChange","onKeyDown","handleKeyDown","initState","todoReducer","arguments","undefined","action","assign","concat","toConsumableArray","filter","store","createStore","TodoList","es","components_Title","components_TodoForm","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fdecafb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Title extends Component {\n  render() {\n    // 接收來自上層元件的 todos 陣列\n    const { todos } = this.props;\n    return (\n      // 將陣列長度顯示在標題後方\n      <h1>待辦事項清單 ({todos.length}) </h1>\n    );\n  }\n}\n\n//mapStateToProps:把Store裡面的State變成這個Component的props\nconst mapStateToProps = state => {\n  return {\n    //傳出來的東西，就是我們可以在這個Component，可以用到的props\n    todos: state.todos\n  };\n};\nexport default connect(mapStateToProps)(Title); //把Component和Connect連再一起\n","/*{//讓Reducer分辨該做什麼事使用\n    \b\n    type:'CREATE_TODO',\n    payload：{\n        text:'上學',\n        id:3\n    }\n\n}*/\n//方便調用export\n\nlet nextStartId = 4;\nexport const createTodo = text => {\n  return {\n    type: \"CREATE_TODO\",\n    text: text,\n    id: nextStartId++\n  };\n};\n\nexport const removeTodo = id => {\n  return {\n    type: \"REMOVE_TODO\",\n    id //變數名稱跟屬性名稱相同就不用:後面\n  };\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { removeTodo } from \"../actions\";\n\nclass List extends Component {\n  render() {\n    // 接收來自上層元件的 todos 陣列\n    const { todos } = this.props;\n    return (\n      <ol>\n        {todos.map((todo, idx) => {\n          return (\n            <li\n              key={todo.id}\n              // 點擊調用來自上層元件提供的 remove 函式\n              onClick={() => this.props.removeTodo(todo.id)}\n            >\n              {todo.text}\n            </li>\n          );\n        })}\n      </ol>\n    );\n  }\n}\n//mapStateToProps:把Store裡面的State變成這個Component的props\nconst mapStateToProps = state => {\n  return {\n    //傳出來的東西，就是我們可以在這個Component，可以用到的props\n    todos: state.todos\n  };\n};\n\n//在List裡面刪項目，把Remove放進來\nconst mapDispatchToProps = dispatch => {\n  return {\n    //return 一些function，都可以在這個Component的props直接取用\n    removeTodo: id => {\n      dispatch(removeTodo(id)); //這裡寫什麼名字，在做component調用時，就是寫什麼名字，整個回傳架構須與action一致\n    }\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(List); //把Component和Connect連再一起\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createTodo } from \"../actions\";\n\nclass TodoForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // 預設 input 內容為空字串\n      text: \"\"\n    };\n  }\n  // 可使用箭頭函式取得 this ，若不使用，則 onClick 就要使用箭頭函式\n  createTodo = () => {\n    // 如果 input 沒有內容，則不執行 createTodo\n    if (!this.state.text) return;\n\n    // 調用從上層元件傳來的 createTodo 函式\n    this.props.createTodo(this.state.text);\n\n    // 將 input 內容改變為初始狀態\n    this.setState({\n      text: \"\"\n    });\n  };\n\n  onInputChange(e) {\n    // 處理 input 的 onChange 事件，將輸入的內容存在 state 中\n    this.setState({\n      text: e.target.value\n    });\n  }\n\n  handleKeyDown(e) {\n    // 判斷如果 input 有值，而且按下 enter 按鈕，則執行 createTodo\n    if (e.target.value && e.keyCode === 13) this.createTodo();\n\n    // 也可以用短路求值\n    // e.target.value && e.keyCode === 13 && this.createTodo()\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          // 監聽 input 的 change 事件\n          onChange={e => this.onInputChange(e)}\n          // 將 state 儲存的 input 值進行雙向綁定，也就是任一個地方改動，另一個也會跟著改動\n          value={this.state.text}\n          // 監聽 input 的 keyDown 事件\n          onKeyDown={e => this.handleKeyDown(e)}\n        />\n        <button\n          onClick={this.createTodo}\n          // 宣告時若不使用箭頭函式，可以這樣寫\n          // onClick={() => this.createTodo}\n        >\n          新增\n        </button>\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => {\n  return {\n    //return 一些function，都可以在這個Component的props直接取用\n    createTodo: text => {\n      dispatch(createTodo(text)); //這裡寫什麼名字，在做component調用時，就是寫什麼名字，整個回傳架構須與action一致\n    }\n  };\n};\nexport default connect(\n  null, //沒有上面那個記得加null\n  mapDispatchToProps\n)(TodoForm); //把Component和Connect連再一起\n\n//form不需要接收任何資料，所以只調用mapDispatchToProps\n","const initState = {\n  todos: [\n    { id: 0, text: \"吃飯\" },\n    { id: 1, text: \"上學\" },\n    { id: 2, text: \"睡覺\" }\n  ]\n};\n//js的物件和陣列資料是mutable\n\n//參照 App.js 的function=> function 由action提供給Reducer\nconst todoReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"CREATE_TODO\":\n      return Object.assign({}, state, {\n        todos: [\n          ...state.todos,\n          {\n            text: action.text,\n            id: action.id\n          }\n        ]\n      });\n    case \"REMOVE_TODO\":\n      return Object.assign({}, state, {\n        todos: state.todos.filter(todo => {\n          //不用加this\n          //filter是產生一個陣列，並不是修改原本的\n          return todo.id !== action.id;\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import React, { Component } from \"react\";\nimport Title from \"./components/Title\";\nimport List from \"./components/List\";\nimport TodoForm from \"./components/TodoForm\";\nimport { createStore } from \"redux\";\nimport todoReducer from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nlet store = createStore(todoReducer);\n\n// 這裡的 class 名稱不一定要用 App ，可以使用任何你想用的名字\nclass TodoList extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        {/*把Store的東西傳到所有組件去*/}\n        <div>\n          <Title />\n          <TodoForm />\n          <List />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './TodoList';\nimport * as serviceWorker from './serviceWorker';\n\n// react 會將 import 進來的 TodoList ， render 在 public 資料夾下的 index.html 中 id 為 root 的 div\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}